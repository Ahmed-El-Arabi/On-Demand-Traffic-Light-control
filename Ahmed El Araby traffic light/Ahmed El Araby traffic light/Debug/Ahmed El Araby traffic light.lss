
Ahmed El Araby traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126f  00000000  00000000  00000974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000910  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba0  00000000  00000000  000024f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00003094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041c  00000000  00000000  000038a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00003cc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 02 	call	0x404	; 0x404 <main>
  8a:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <check>:

int carMode = 1; //Normal mode flag = 1 Pedestrian = 0


//Function that is called between every light transition in the main loop to check if the ISR was called or not
int check(){ 
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	if(carMode == 0){ //if the ISR is called we will execute the code, else return 0
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  9e:	89 2b       	or	r24, r25
  a0:	d9 f5       	brne	.+118    	; 0x118 <check+0x86>
		if(carState == 1){   //if car light is green or yellow
  a2:	c0 91 64 00 	lds	r28, 0x0064	; 0x800064 <carState>
  a6:	d0 91 65 00 	lds	r29, 0x0065	; 0x800065 <carState+0x1>
  aa:	c1 30       	cpi	r28, 0x01	; 1
  ac:	d1 05       	cpc	r29, r1
  ae:	c9 f4       	brne	.+50     	; 0xe2 <check+0x50>
			
			LED_all_off();
  b0:	0e 94 86 01 	call	0x30c	; 0x30c <LED_all_off>
			RP_ON();
  b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <RP_ON>
			TIMER_yellow();
  b8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <TIMER_yellow>
			RP_OFF();
  bc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <RP_OFF>
			
			GP_ON();
  c0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <GP_ON>
			RC_ON();
  c4:	0e 94 b3 01 	call	0x366	; 0x366 <RC_ON>
			TIMER_delay();
  c8:	0e 94 0c 01 	call	0x218	; 0x218 <TIMER_delay>
			
			GP_OFF();
  cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <GP_OFF>
			RC_OFF();
  d0:	0e 94 a8 01 	call	0x350	; 0x350 <RC_OFF>
			
			carMode = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return 1;
  e0:	1d c0       	rjmp	.+58     	; 0x11c <check+0x8a>
		}
		else{ //if car light is red
			LED_all_off();
  e2:	0e 94 86 01 	call	0x30c	; 0x30c <LED_all_off>
			
			RC_ON();
  e6:	0e 94 b3 01 	call	0x366	; 0x366 <RC_ON>
			GP_ON();
  ea:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <GP_ON>
			TIMER_delay();
  ee:	0e 94 0c 01 	call	0x218	; 0x218 <TIMER_delay>
			RC_OFF();
  f2:	0e 94 a8 01 	call	0x350	; 0x350 <RC_OFF>
			TIMER_yellow();
  f6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <TIMER_yellow>
			GP_OFF();
  fa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <GP_OFF>
			RP_ON();
  fe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <RP_ON>
			GC_ON();
 102:	0e 94 d7 01 	call	0x3ae	; 0x3ae <GC_ON>
			carMode = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			return 1;
 112:	c1 e0       	ldi	r28, 0x01	; 1
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <check+0x8a>
		}
	}
	return 0;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
}
 11c:	ce 01       	movw	r24, r28
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <APP_init>:

void APP_init(void){
	
	//Button init
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
 124:	60 b3       	in	r22, 0x10	; 16
 126:	64 70       	andi	r22, 0x04	; 4
 128:	84 e4       	ldi	r24, 0x44	; 68
 12a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <BUTTON_init>
	
	//LEDS init pedestrian
	LED_init(LED_PORT_PED,LED_G_PED);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	81 e4       	ldi	r24, 0x41	; 65
 132:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(LED_PORT_PED,LED_Y_PED);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(LED_PORT_PED,LED_R_PED);
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	81 e4       	ldi	r24, 0x41	; 65
 142:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	
	//LEDS init car
	LED_init(LED_PORT_CAR,LED_G_CAR);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	82 e4       	ldi	r24, 0x42	; 66
 14a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(LED_PORT_CAR,LED_Y_CAR);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	82 e4       	ldi	r24, 0x42	; 66
 152:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(LED_PORT_CAR,LED_R_CAR);	
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	
	
	//Timer init
	TIMER_init();
 15e:	0e 94 09 01 	call	0x212	; 0x212 <TIMER_init>
	
	//Interrupts init
	sei(); //enable global interrupt
 162:	78 94       	sei
	RISING_EDGE_SETUP();
 164:	85 b7       	in	r24, 0x35	; 53
 166:	83 60       	ori	r24, 0x03	; 3
 168:	85 bf       	out	0x35, r24	; 53
	SETUP_INT0();
 16a:	8b b7       	in	r24, 0x3b	; 59
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	8b bf       	out	0x3b, r24	; 59
 170:	08 95       	ret

00000172 <APP_start>:
}


void APP_start(void){
	while(1){ 
		LED_all_off();
 172:	0e 94 86 01 	call	0x30c	; 0x30c <LED_all_off>
		
		GC_ON();		
 176:	0e 94 d7 01 	call	0x3ae	; 0x3ae <GC_ON>
		if(check() == 1){
 17a:	0e 94 49 00 	call	0x92	; 0x92 <check>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	c1 f3       	breq	.-16     	; 0x172 <APP_start>
			continue;
		}
		
		TIMER_delay();
 182:	0e 94 0c 01 	call	0x218	; 0x218 <TIMER_delay>
		if(check() == 1){
 186:	0e 94 49 00 	call	0x92	; 0x92 <check>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	91 f3       	breq	.-28     	; 0x172 <APP_start>
			continue;
		}
		GC_OFF();
 18e:	0e 94 cc 01 	call	0x398	; 0x398 <GC_OFF>
		if(check() == 1){
 192:	0e 94 49 00 	call	0x92	; 0x92 <check>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	61 f3       	breq	.-40     	; 0x172 <APP_start>
			continue;
		}
		TIMER_yellow_car();
 19a:	0e 94 c7 01 	call	0x38e	; 0x38e <TIMER_yellow_car>
		if(check() == 1){
 19e:	0e 94 49 00 	call	0x92	; 0x92 <check>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	31 f3       	breq	.-52     	; 0x172 <APP_start>
			continue;
		}
		
		RC_ON();
 1a6:	0e 94 b3 01 	call	0x366	; 0x366 <RC_ON>
		if(check() == 1){
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <check>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	01 f3       	breq	.-64     	; 0x172 <APP_start>
			continue;
		}
		TIMER_delay();
 1b2:	0e 94 0c 01 	call	0x218	; 0x218 <TIMER_delay>
		if(check() == 1){
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <check>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	d1 f2       	breq	.-76     	; 0x172 <APP_start>
			continue;
		}
		RC_OFF();
 1be:	0e 94 a8 01 	call	0x350	; 0x350 <RC_OFF>
		if(check() == 1){
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <check>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	a1 f2       	breq	.-88     	; 0x172 <APP_start>
			continue;
		}

		TIMER_yellow_car();
 1ca:	0e 94 c7 01 	call	0x38e	; 0x38e <TIMER_yellow_car>
 1ce:	d1 cf       	rjmp	.-94     	; 0x172 <APP_start>

000001d0 <__vector_1>:
}
}


//Interrupt Service Routine that changes carMode to 0, which executes check(); function
ISR(EXT_INT_0){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
	carMode = 0;
 1da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <BUTTON_init>:

#include "button.h"

//initialize
void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin){
	DIO_init(buttonPort,buttonPin,IN);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_init>
 1f2:	08 95       	ret

000001f4 <LED_init>:

#include "led.h"


void LED_init(uint8_t ledPort, uint8_t ledPin){ //OUTPUT
	DIO_init(ledPort,ledPin,OUT);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_init>
 1fa:	08 95       	ret

000001fc <LED_on>:
}

void LED_on(uint8_t ledPort, uint8_t ledPin){
	DIO_write(ledPort,ledPin,HIGH);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 202:	08 95       	ret

00000204 <LED_off>:
}

void LED_off(uint8_t ledPort, uint8_t ledPin){
	DIO_write(ledPort,ledPin,LOW);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 20a:	08 95       	ret

0000020c <LED_toggle>:
}

void LED_toggle(uint8_t ledPort, uint8_t ledPin){
	DIO_toggle(ledPort,ledPin);
 20c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <DIO_toggle>
 210:	08 95       	ret

00000212 <TIMER_init>:
#include "../Button Driver/button.h"
#include "../../Lights/lights.h"

//Timer set initial value
void TIMER_init(){
	TCCR0 = 0x00;
 212:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 214:	12 be       	out	0x32, r1	; 50
 216:	08 95       	ret

00000218 <TIMER_delay>:
}


//timer delay for 5 seconds
void TIMER_delay(){ 
	TCCR0 |= (1<<0); //no prescalar (1)
 218:	83 b7       	in	r24, 0x33	; 51
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	83 bf       	out	0x33, r24	; 51
	//Ttick = 1 microsecond
	//Tmax = 256 microseconds
	//Number of overflows to reach 5 seconds = 5/256x10^-6 = 19531.25 rounded up = 19532
	//wait until overflow
	overflowCounter = 0;
 21e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 222:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	
	/*the and condition breaks the timer if the button is pressed, thus you 
	 don't have to wait for the delay to finish so that the ISR is executed */
	while(overflowCounter < overflows && ((BUTTON_1_PIN) == 0) ){   
 226:	0f c0       	rjmp	.+30     	; 0x246 <TIMER_delay+0x2e>
		while((TIFR & (1<<0)) == 0 ); 
 228:	08 b6       	in	r0, 0x38	; 56
 22a:	00 fe       	sbrs	r0, 0
 22c:	fd cf       	rjmp	.-6      	; 0x228 <TIMER_delay+0x10>
		//clear bit
		TIFR |= (1<<0);
 22e:	88 b7       	in	r24, 0x38	; 56
 230:	81 60       	ori	r24, 0x01	; 1
 232:	88 bf       	out	0x38, r24	; 56
		//Timer Stop
		overflowCounter++;
 234:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 238:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 242:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	//wait until overflow
	overflowCounter = 0;
	
	/*the and condition breaks the timer if the button is pressed, thus you 
	 don't have to wait for the delay to finish so that the ISR is executed */
	while(overflowCounter < overflows && ((BUTTON_1_PIN) == 0) ){   
 246:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 24a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 24e:	8c 34       	cpi	r24, 0x4C	; 76
 250:	9c 44       	sbci	r25, 0x4C	; 76
 252:	14 f4       	brge	.+4      	; 0x258 <TIMER_delay+0x40>
 254:	82 9b       	sbis	0x10, 2	; 16
 256:	e8 cf       	rjmp	.-48     	; 0x228 <TIMER_delay+0x10>
		//clear bit
		TIFR |= (1<<0);
		//Timer Stop
		overflowCounter++;
	}
	overflowCounter = 0;
 258:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 25c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
			
	TCCR0 = 0x00;
 260:	13 be       	out	0x33, r1	; 51
 262:	08 95       	ret

00000264 <TIMER_blink_car>:
}

//Timer for blinking yellow leds
void TIMER_blink_car(){
	TCCR0 |= (1<<0); //no prescalar (1)
 264:	83 b7       	in	r24, 0x33	; 51
 266:	81 60       	ori	r24, 0x01	; 1
 268:	83 bf       	out	0x33, r24	; 51
	while(overflowCounter < overflows  && ((BUTTON_1_PIN) == 0) ){ 
 26a:	19 c0       	rjmp	.+50     	; 0x29e <TIMER_blink_car+0x3a>
		while((TIFR & (1<<0)) == 0 );
 26c:	08 b6       	in	r0, 0x38	; 56
 26e:	00 fe       	sbrs	r0, 0
 270:	fd cf       	rjmp	.-6      	; 0x26c <TIMER_blink_car+0x8>
		
		TIFR |= (1<<0);
 272:	88 b7       	in	r24, 0x38	; 56
 274:	81 60       	ori	r24, 0x01	; 1
 276:	88 bf       	out	0x38, r24	; 56
		overflowCounter++;
 278:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 27c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 280:	01 96       	adiw	r24, 0x01	; 1
 282:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 286:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		
		//The yellow light blinks time in 5 seconds so the remainder of the overflow counter/5 is a condition to toggle the led
		if(overflowCounter % 1953 == 0){
 28a:	61 ea       	ldi	r22, 0xA1	; 161
 28c:	77 e0       	ldi	r23, 0x07	; 7
 28e:	0e 94 33 03 	call	0x666	; 0x666 <__divmodhi4>
 292:	89 2b       	or	r24, r25
 294:	21 f4       	brne	.+8      	; 0x29e <TIMER_blink_car+0x3a>
				LED_toggle(LED_PORT_CAR,LED_Y_CAR);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	0e 94 06 01 	call	0x20c	; 0x20c <LED_toggle>
}

//Timer for blinking yellow leds
void TIMER_blink_car(){
	TCCR0 |= (1<<0); //no prescalar (1)
	while(overflowCounter < overflows  && ((BUTTON_1_PIN) == 0) ){ 
 29e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2a2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 2a6:	8c 34       	cpi	r24, 0x4C	; 76
 2a8:	9c 44       	sbci	r25, 0x4C	; 76
 2aa:	14 f4       	brge	.+4      	; 0x2b0 <TIMER_blink_car+0x4c>
 2ac:	82 9b       	sbis	0x10, 2	; 16
 2ae:	de cf       	rjmp	.-68     	; 0x26c <TIMER_blink_car+0x8>
		//The yellow light blinks time in 5 seconds so the remainder of the overflow counter/5 is a condition to toggle the led
		if(overflowCounter % 1953 == 0){
				LED_toggle(LED_PORT_CAR,LED_Y_CAR);
		}
	}
	overflowCounter = 0;		
 2b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 2b4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 2b8:	13 be       	out	0x33, r1	; 51
 2ba:	08 95       	ret

000002bc <TIMER_blink>:
}


//same as the function above but blinks both ped and car lights
void TIMER_blink(){
	TCCR0 |= (1<<0); //no prescalar (1)
 2bc:	83 b7       	in	r24, 0x33	; 51
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	83 bf       	out	0x33, r24	; 51
	while(overflowCounter < overflows){ //&& ((BUTTON_1_PIN) == 0)
 2c2:	17 c0       	rjmp	.+46     	; 0x2f2 <TIMER_blink+0x36>
		while((TIFR & (1<<0)) == 0 );
 2c4:	08 b6       	in	r0, 0x38	; 56
 2c6:	00 fe       	sbrs	r0, 0
 2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <TIMER_blink+0x8>
		//clear bit
		TIFR |= (1<<0);
 2ca:	88 b7       	in	r24, 0x38	; 56
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	88 bf       	out	0x38, r24	; 56
		//Timer Stop
		overflowCounter++;
 2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 2de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		
		if(overflowCounter % 1953 == 0){
 2e2:	61 ea       	ldi	r22, 0xA1	; 161
 2e4:	77 e0       	ldi	r23, 0x07	; 7
 2e6:	0e 94 33 03 	call	0x666	; 0x666 <__divmodhi4>
 2ea:	89 2b       	or	r24, r25
 2ec:	11 f4       	brne	.+4      	; 0x2f2 <TIMER_blink+0x36>
			TOGGLE_yellow();
 2ee:	0e 94 9f 01 	call	0x33e	; 0x33e <TOGGLE_yellow>


//same as the function above but blinks both ped and car lights
void TIMER_blink(){
	TCCR0 |= (1<<0); //no prescalar (1)
	while(overflowCounter < overflows){ //&& ((BUTTON_1_PIN) == 0)
 2f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 2f6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 2fa:	8c 34       	cpi	r24, 0x4C	; 76
 2fc:	9c 44       	sbci	r25, 0x4C	; 76
 2fe:	14 f3       	brlt	.-60     	; 0x2c4 <TIMER_blink+0x8>
		
		if(overflowCounter % 1953 == 0){
			TOGGLE_yellow();
		}
	}
	overflowCounter = 0;		
 300:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 304:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	TCCR0 = 0x00;
 308:	13 be       	out	0x33, r1	; 51
 30a:	08 95       	ret

0000030c <LED_all_off>:
void GP_OFF(){
	LED_off(LED_PORT_PED,LED_G_PED); //RED car
}

void YP_ON(){
	LED_on(LED_PORT_PED,LED_Y_PED); //RED car
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	81 e4       	ldi	r24, 0x41	; 65
 310:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	82 e4       	ldi	r24, 0x42	; 66
 328:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 32c:	62 e0       	ldi	r22, 0x02	; 2
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 334:	62 e0       	ldi	r22, 0x02	; 2
 336:	82 e4       	ldi	r24, 0x42	; 66
 338:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 33c:	08 95       	ret

0000033e <TOGGLE_yellow>:
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	82 e4       	ldi	r24, 0x42	; 66
 342:	0e 94 06 01 	call	0x20c	; 0x20c <LED_toggle>
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e4       	ldi	r24, 0x41	; 65
 34a:	0e 94 06 01 	call	0x20c	; 0x20c <LED_toggle>
 34e:	08 95       	ret

00000350 <RC_OFF>:
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 358:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	82 e4       	ldi	r24, 0x42	; 66
 360:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 364:	08 95       	ret

00000366 <RC_ON>:
 366:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <carState+0x1>
 36a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <carState>
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	82 e4       	ldi	r24, 0x42	; 66
 372:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LED_on>
 376:	08 95       	ret

00000378 <YC_OFF>:
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 380:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	82 e4       	ldi	r24, 0x42	; 66
 388:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 38c:	08 95       	ret

0000038e <TIMER_yellow_car>:
 38e:	0e 94 32 01 	call	0x264	; 0x264 <TIMER_blink_car>
 392:	0e 94 bc 01 	call	0x378	; 0x378 <YC_OFF>
 396:	08 95       	ret

00000398 <GC_OFF>:
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 3a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	82 e4       	ldi	r24, 0x42	; 66
 3a8:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 3ac:	08 95       	ret

000003ae <GC_ON>:
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <carState+0x1>
 3b6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <carState>
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	82 e4       	ldi	r24, 0x42	; 66
 3be:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LED_on>
 3c2:	08 95       	ret

000003c4 <RP_ON>:
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LED_on>
 3cc:	08 95       	ret

000003ce <RP_OFF>:
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e4       	ldi	r24, 0x41	; 65
 3d2:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 3d6:	08 95       	ret

000003d8 <GP_ON>:
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LED_on>
 3e0:	08 95       	ret

000003e2 <GP_OFF>:
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	81 e4       	ldi	r24, 0x41	; 65
 3e6:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 3ea:	08 95       	ret

000003ec <YP_OFF>:
}

void YP_OFF(){
	LED_off(LED_PORT_PED,LED_Y_PED); //RED car
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	81 e4       	ldi	r24, 0x41	; 65
 3f0:	0e 94 02 01 	call	0x204	; 0x204 <LED_off>
 3f4:	08 95       	ret

000003f6 <TIMER_yellow>:
	YC_OFF();
}


void TIMER_yellow(){
	TIMER_blink();
 3f6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <TIMER_blink>
	YP_OFF();
 3fa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <YP_OFF>
	YC_OFF();
 3fe:	0e 94 bc 01 	call	0x378	; 0x378 <YC_OFF>
 402:	08 95       	ret

00000404 <main>:



int main(void)
{
    APP_init();
 404:	0e 94 92 00 	call	0x124	; 0x124 <APP_init>
    while (1) 
    {
		APP_start();
 408:	0e 94 b9 00 	call	0x172	; 0x172 <APP_start>
 40c:	fd cf       	rjmp	.-6      	; 0x408 <main+0x4>

0000040e <DIO_init>:


#include "dio.h"

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction){
	switch(portNumber){
 40e:	82 34       	cpi	r24, 0x42	; 66
 410:	31 f1       	breq	.+76     	; 0x45e <DIO_init+0x50>
 412:	18 f4       	brcc	.+6      	; 0x41a <DIO_init+0xc>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	39 f0       	breq	.+14     	; 0x426 <DIO_init+0x18>
 418:	08 95       	ret
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	e1 f1       	breq	.+120    	; 0x496 <DIO_init+0x88>
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_init+0x16>
 422:	54 c0       	rjmp	.+168    	; 0x4cc <DIO_init+0xbe>
 424:	08 95       	ret
		
		
		case PORT_A:
		if(direction == IN){
 426:	41 11       	cpse	r20, r1
 428:	0c c0       	rjmp	.+24     	; 0x442 <DIO_init+0x34>
			DDRA &= ~(1<<pinNumber); //input
 42a:	2a b3       	in	r18, 0x1a	; 26
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_init+0x28>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_init+0x24>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	8a bb       	out	0x1a, r24	; 26
 440:	08 95       	ret
		}
		else if(direction == OUT)
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <DIO_init+0x3a>
 446:	5c c0       	rjmp	.+184    	; 0x500 <DIO_init+0xf2>
		{
			DDRA |= (1<<pinNumber); //output
 448:	2a b3       	in	r18, 0x1a	; 26
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_init+0x46>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_init+0x42>
 458:	82 2b       	or	r24, r18
 45a:	8a bb       	out	0x1a, r24	; 26
 45c:	08 95       	ret
		break;
		
		
		
		case PORT_B:
		if(direction == IN){
 45e:	41 11       	cpse	r20, r1
 460:	0c c0       	rjmp	.+24     	; 0x47a <DIO_init+0x6c>
			DDRB &= ~(1<<pinNumber); //input
 462:	27 b3       	in	r18, 0x17	; 23
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_init+0x60>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_init+0x5c>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	87 bb       	out	0x17, r24	; 23
 478:	08 95       	ret
		}
		else if(direction == OUT)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	09 f0       	breq	.+2      	; 0x480 <DIO_init+0x72>
 47e:	40 c0       	rjmp	.+128    	; 0x500 <DIO_init+0xf2>
		{
			DDRB |= (1<<pinNumber); //output
 480:	27 b3       	in	r18, 0x17	; 23
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_init+0x7e>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_init+0x7a>
 490:	82 2b       	or	r24, r18
 492:	87 bb       	out	0x17, r24	; 23
 494:	08 95       	ret
		break;
		
		
		
		case PORT_C:
		if(direction == IN){
 496:	41 11       	cpse	r20, r1
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <DIO_init+0xa4>
			DDRC &= ~(1<<pinNumber); //input
 49a:	24 b3       	in	r18, 0x14	; 20
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_init+0x98>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_init+0x94>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	84 bb       	out	0x14, r24	; 20
 4b0:	08 95       	ret
		}
		else if(direction == OUT)
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	29 f5       	brne	.+74     	; 0x500 <DIO_init+0xf2>
		{
			DDRC |= (1<<pinNumber); //output
 4b6:	24 b3       	in	r18, 0x14	; 20
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_init+0xb4>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_init+0xb0>
 4c6:	82 2b       	or	r24, r18
 4c8:	84 bb       	out	0x14, r24	; 20
 4ca:	08 95       	ret
		break;
		
		
		
		case PORT_D:
		if(direction == IN){
 4cc:	41 11       	cpse	r20, r1
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <DIO_init+0xda>
			DDRD &= ~(1<<pinNumber); //input
 4d0:	21 b3       	in	r18, 0x11	; 17
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_init+0xce>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_init+0xca>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	81 bb       	out	0x11, r24	; 17
 4e6:	08 95       	ret
		}
		else if(direction == OUT)
 4e8:	41 30       	cpi	r20, 0x01	; 1
 4ea:	51 f4       	brne	.+20     	; 0x500 <DIO_init+0xf2>
		{
			DDRD |= (1<<pinNumber); //output
 4ec:	21 b3       	in	r18, 0x11	; 17
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_init+0xea>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_init+0xe6>
 4fc:	82 2b       	or	r24, r18
 4fe:	81 bb       	out	0x11, r24	; 17
 500:	08 95       	ret

00000502 <DIO_write>:
		break;
		
	}
}
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value){
	switch(portNumber){
 502:	82 34       	cpi	r24, 0x42	; 66
 504:	29 f1       	breq	.+74     	; 0x550 <DIO_write+0x4e>
 506:	18 f4       	brcc	.+6      	; 0x50e <DIO_write+0xc>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	39 f0       	breq	.+14     	; 0x51a <DIO_write+0x18>
 50c:	08 95       	ret
 50e:	83 34       	cpi	r24, 0x43	; 67
 510:	d1 f1       	breq	.+116    	; 0x586 <DIO_write+0x84>
 512:	84 34       	cpi	r24, 0x44	; 68
 514:	09 f4       	brne	.+2      	; 0x518 <DIO_write+0x16>
 516:	52 c0       	rjmp	.+164    	; 0x5bc <DIO_write+0xba>
 518:	08 95       	ret
		case PORT_A :
		if(value == LOW){
 51a:	41 30       	cpi	r20, 0x01	; 1
 51c:	61 f4       	brne	.+24     	; 0x536 <DIO_write+0x34>
			PORTA &= ~(1<<pinNumber); //input
 51e:	2b b3       	in	r18, 0x1b	; 27
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0x28>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0x24>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	8b bb       	out	0x1b, r24	; 27
 534:	08 95       	ret
		}
		else if(value == HIGH)
 536:	41 11       	cpse	r20, r1
 538:	5b c0       	rjmp	.+182    	; 0x5f0 <DIO_write+0xee>
		{
			PORTA |= (1<<pinNumber); //output
 53a:	2b b3       	in	r18, 0x1b	; 27
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_write+0x44>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_write+0x40>
 54a:	82 2b       	or	r24, r18
 54c:	8b bb       	out	0x1b, r24	; 27
 54e:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_B :
		if(value == LOW){
 550:	41 30       	cpi	r20, 0x01	; 1
 552:	61 f4       	brne	.+24     	; 0x56c <DIO_write+0x6a>
			PORTB &= ~(1<<pinNumber); //input
 554:	28 b3       	in	r18, 0x18	; 24
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_write+0x5e>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_write+0x5a>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	88 bb       	out	0x18, r24	; 24
 56a:	08 95       	ret
		}
		else if(value == HIGH)
 56c:	41 11       	cpse	r20, r1
 56e:	40 c0       	rjmp	.+128    	; 0x5f0 <DIO_write+0xee>
		{
			PORTB |= (1<<pinNumber); //output
 570:	28 b3       	in	r18, 0x18	; 24
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_write+0x7a>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_write+0x76>
 580:	82 2b       	or	r24, r18
 582:	88 bb       	out	0x18, r24	; 24
 584:	08 95       	ret
		else{
			//error
		}
		break;
		case PORT_C :
		if(value == LOW){
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	61 f4       	brne	.+24     	; 0x5a2 <DIO_write+0xa0>
			PORTC &= ~(1<<pinNumber); //input
 58a:	25 b3       	in	r18, 0x15	; 21
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_write+0x94>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_write+0x90>
 59a:	80 95       	com	r24
 59c:	82 23       	and	r24, r18
 59e:	85 bb       	out	0x15, r24	; 21
 5a0:	08 95       	ret
		}
		else if(value == HIGH)
 5a2:	41 11       	cpse	r20, r1
 5a4:	25 c0       	rjmp	.+74     	; 0x5f0 <DIO_write+0xee>
		{
			PORTC |= (1<<pinNumber); //output
 5a6:	25 b3       	in	r18, 0x15	; 21
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_write+0xb0>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_write+0xac>
 5b6:	82 2b       	or	r24, r18
 5b8:	85 bb       	out	0x15, r24	; 21
 5ba:	08 95       	ret
			//error
		}
		break;
		
		case PORT_D :
		if(value == LOW){
 5bc:	41 30       	cpi	r20, 0x01	; 1
 5be:	61 f4       	brne	.+24     	; 0x5d8 <DIO_write+0xd6>
			PORTD &= ~(1<<pinNumber); //input
 5c0:	22 b3       	in	r18, 0x12	; 18
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_write+0xca>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_write+0xc6>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	82 bb       	out	0x12, r24	; 18
 5d6:	08 95       	ret
		}
		else if(value == HIGH)
 5d8:	41 11       	cpse	r20, r1
 5da:	0a c0       	rjmp	.+20     	; 0x5f0 <DIO_write+0xee>
		{
			PORTD |= (1<<pinNumber); //output
 5dc:	22 b3       	in	r18, 0x12	; 18
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_write+0xe6>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_write+0xe2>
 5ec:	82 2b       	or	r24, r18
 5ee:	82 bb       	out	0x12, r24	; 18
 5f0:	08 95       	ret

000005f2 <DIO_toggle>:
		break;
		
	}
}
void DIO_toggle(uint8_t portNumber, uint8_t pinNumber){ // toggle dio
	switch(portNumber){
 5f2:	82 34       	cpi	r24, 0x42	; 66
 5f4:	b9 f0       	breq	.+46     	; 0x624 <DIO_toggle+0x32>
 5f6:	18 f4       	brcc	.+6      	; 0x5fe <DIO_toggle+0xc>
 5f8:	81 34       	cpi	r24, 0x41	; 65
 5fa:	31 f0       	breq	.+12     	; 0x608 <DIO_toggle+0x16>
 5fc:	08 95       	ret
 5fe:	83 34       	cpi	r24, 0x43	; 67
 600:	e1 f0       	breq	.+56     	; 0x63a <DIO_toggle+0x48>
 602:	84 34       	cpi	r24, 0x44	; 68
 604:	29 f1       	breq	.+74     	; 0x650 <DIO_toggle+0x5e>
 606:	08 95       	ret
		case PORT_A:
		PORTA ^= (1<<7); //This line serves no function but it was added as the code for some reason skipped the first line, so I added anything here as it is already skipped
 608:	8b b3       	in	r24, 0x1b	; 27
 60a:	80 58       	subi	r24, 0x80	; 128
 60c:	8b bb       	out	0x1b, r24	; 27
		PORTA ^= (1<<pinNumber);
 60e:	2b b3       	in	r18, 0x1b	; 27
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_toggle+0x28>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	6a 95       	dec	r22
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_toggle+0x24>
 61e:	82 27       	eor	r24, r18
 620:	8b bb       	out	0x1b, r24	; 27
		break;
 622:	08 95       	ret
		
		case PORT_B:
		PORTB ^= (1<<pinNumber);
 624:	28 b3       	in	r18, 0x18	; 24
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_toggle+0x3e>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_toggle+0x3a>
 634:	82 27       	eor	r24, r18
 636:	88 bb       	out	0x18, r24	; 24
		break;
 638:	08 95       	ret
		
		case PORT_C:
		PORTC ^= (1<<pinNumber);
 63a:	25 b3       	in	r18, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_toggle+0x54>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_toggle+0x50>
 64a:	82 27       	eor	r24, r18
 64c:	85 bb       	out	0x15, r24	; 21
		break;
 64e:	08 95       	ret
		
		case PORT_D:
		PORTD ^= (1<<pinNumber);
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_toggle+0x6a>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_toggle+0x66>
 660:	82 27       	eor	r24, r18
 662:	82 bb       	out	0x12, r24	; 18
 664:	08 95       	ret

00000666 <__divmodhi4>:
 666:	97 fb       	bst	r25, 7
 668:	07 2e       	mov	r0, r23
 66a:	16 f4       	brtc	.+4      	; 0x670 <__divmodhi4+0xa>
 66c:	00 94       	com	r0
 66e:	07 d0       	rcall	.+14     	; 0x67e <__divmodhi4_neg1>
 670:	77 fd       	sbrc	r23, 7
 672:	09 d0       	rcall	.+18     	; 0x686 <__divmodhi4_neg2>
 674:	0e 94 47 03 	call	0x68e	; 0x68e <__udivmodhi4>
 678:	07 fc       	sbrc	r0, 7
 67a:	05 d0       	rcall	.+10     	; 0x686 <__divmodhi4_neg2>
 67c:	3e f4       	brtc	.+14     	; 0x68c <__divmodhi4_exit>

0000067e <__divmodhi4_neg1>:
 67e:	90 95       	com	r25
 680:	81 95       	neg	r24
 682:	9f 4f       	sbci	r25, 0xFF	; 255
 684:	08 95       	ret

00000686 <__divmodhi4_neg2>:
 686:	70 95       	com	r23
 688:	61 95       	neg	r22
 68a:	7f 4f       	sbci	r23, 0xFF	; 255

0000068c <__divmodhi4_exit>:
 68c:	08 95       	ret

0000068e <__udivmodhi4>:
 68e:	aa 1b       	sub	r26, r26
 690:	bb 1b       	sub	r27, r27
 692:	51 e1       	ldi	r21, 0x11	; 17
 694:	07 c0       	rjmp	.+14     	; 0x6a4 <__udivmodhi4_ep>

00000696 <__udivmodhi4_loop>:
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	a6 17       	cp	r26, r22
 69c:	b7 07       	cpc	r27, r23
 69e:	10 f0       	brcs	.+4      	; 0x6a4 <__udivmodhi4_ep>
 6a0:	a6 1b       	sub	r26, r22
 6a2:	b7 0b       	sbc	r27, r23

000006a4 <__udivmodhi4_ep>:
 6a4:	88 1f       	adc	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	5a 95       	dec	r21
 6aa:	a9 f7       	brne	.-22     	; 0x696 <__udivmodhi4_loop>
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	bc 01       	movw	r22, r24
 6b2:	cd 01       	movw	r24, r26
 6b4:	08 95       	ret

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
